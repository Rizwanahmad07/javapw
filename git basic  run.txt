PowerShell 7.2.7
Copyright (c) Microsoft Corporation.

https://aka.ms/powershell
Type 'help' to get help.

PS C:\Users\mdriz> cd c:/project
PS C:\project> mkdir javapw

    Directory: C:\project

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d----          10/29/2022  4:35 PM                javapw

PS C:\project> cd javapw
PS C:\project\javapw> git-config get
git-config: The term 'git-config' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
PS C:\project\javapw> get config
get: The term 'get' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
PS C:\project\javapw> git config
usage: git config [<options>]

Config file location
    --global              use global config file
    --system              use system config file
    --local               use repository config file
    --worktree            use per-worktree config file
    -f, --file <file>     use given config file
    --blob <blob-id>      read config from given blob object

Action
    --get                 get value: name [value-pattern]
    --get-all             get all values: key [value-pattern]
    --get-regexp          get values for regexp: name-regex [value-pattern]
    --get-urlmatch        get value specific for the URL: section[.var] URL
    --replace-all         replace all matching variables: name value [value-pattern]
    --add                 add a new variable: name value
    --unset               remove a variable: name [value-pattern]
    --unset-all           remove all matches: name [value-pattern]
    --rename-section      rename section: old-name new-name
    --remove-section      remove a section: name
    -l, --list            list all
    --fixed-value         use string equality when comparing values to 'value-pattern'
    -e, --edit            open an editor
    --get-color           find the color configured: slot [default]
    --get-colorbool       find the color setting: slot [stdout-is-tty]

Type
    -t, --type <type>     value is given this type
    --bool                value is "true" or "false"
    --int                 value is decimal number
    --bool-or-int         value is --bool or --int
    --bool-or-str         value is --bool or string
    --path                value is a path (file or directory name)
    --expiry-date         value is an expiry date

Other
    -z, --null            terminate values with NUL byte
    --name-only           show variable names only
    --includes            respect include directives on lookup
    --show-origin         show origin of config (file, standard input, blob, command line)
    --show-scope          show scope of config (worktree, local, global, system, command)
    --default <value>     with --get, use default value when missing entry

PS C:\project\javapw> git config --list
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=openssl
http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
core.autocrlf=true
core.fscache=true
core.symlinks=false
pull.rebase=false
credential.helper=manager-core
credential.https://dev.azure.com.usehttppath=true
init.defaultbranch=master
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
user.name=rizzu
user.email=mdrizwanahmad078@gmail.com
PS C:\project\javapw> git config user.name "RIZWAN"
fatal: not in a git directory
PS C:\project\javapw> git init -b main
Initialized empty Git repository in C:/project/javapw/.git/
PS C:\project\javapw> git config user.name "RIZWAN"
PS C:\project\javapw> git config user.email "rizwantech07@gmail.com
>> "
PS C:\project\javapw> git config user.email "mdrizwanahmad078@gmail.com"
PS C:\project\javapw> git add .
PS C:\project\javapw> git status
On branch main

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   readme.txt

PS C:\project\javapw> git commit -m "initial commit for javapw"
[main (root-commit) dc54015] initial commit for javapw
 1 file changed, 1 insertion(+)
 create mode 100644 readme.txt
PS C:\project\javapw> git status
On branch main
nothing to commit, working tree clean
PS C:\project\javapw> git remote add origin https://github.com/Rizwanahmad07/javapw.git
PS C:\project\javapw> git remote -v
origin  https://github.com/Rizwanahmad07/javapw.git (fetch)
origin  https://github.com/Rizwanahmad07/javapw.git (push)
PS C:\project\javapw> git push origin main
Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Writing objects: 100% (3/3), 269 bytes | 269.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
To https://github.com/Rizwanahmad07/javapw.git
 * [new branch]      main -> main
PS C:\project\javapw> git status
On branch main
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        javapwbasic/

nothing added to commit but untracked files present (use "git add" to track)
PS C:\project\javapw> git add .
warning: in the working copy of 'javapwbasic/src/Main.java', LF will be replaced by CRLF the next time Git touches it
PS C:\project\javapw> git status
On branch main
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   javapwbasic/.idea/.gitignore
        new file:   javapwbasic/.idea/misc.xml
        new file:   javapwbasic/.idea/modules.xml
        new file:   javapwbasic/.idea/vcs.xml
        new file:   javapwbasic/javapwbasic.iml
        new file:   javapwbasic/out/production/javapwbasic/Main.class
        new file:   javapwbasic/src/Main.java

PS C:\project\javapw> git commit -m "added first java hello world"
[main ec5e9e6] added first java hello world
 7 files changed, 40 insertions(+)
 create mode 100644 javapwbasic/.idea/.gitignore
 create mode 100644 javapwbasic/.idea/misc.xml
 create mode 100644 javapwbasic/.idea/modules.xml
 create mode 100644 javapwbasic/.idea/vcs.xml
 create mode 100644 javapwbasic/javapwbasic.iml
 create mode 100644 javapwbasic/out/production/javapwbasic/Main.class
 create mode 100644 javapwbasic/src/Main.java
PS C:\project\javapw> git push origin main
Enumerating objects: 16, done.
Counting objects: 100% (16/16), done.
Delta compression using up to 16 threads
Compressing objects: 100% (10/10), done.
Writing objects: 100% (15/15), 2.00 KiB | 511.00 KiB/s, done.
Total 15 (delta 0), reused 0 (delta 0), pack-reused 0
To https://github.com/Rizwanahmad07/javapw.git
   dc54015..ec5e9e6  main -> main
PS C:\project\javapw> cd..
PS C:\project> gh repo clone Rizwanahmad07/javapw
gh: The term 'gh' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
PS C:\project> git clone gh repo clone Rizwanahmad07/javapw
fatal: Too many arguments.

usage: git clone [<options>] [--] <repo> [<dir>]

    -v, --verbose         be more verbose
    -q, --quiet           be more quiet
    --progress            force progress reporting
    --reject-shallow      don't clone shallow repository
    -n, --no-checkout     don't create a checkout
    --bare                create a bare repository
    --mirror              create a mirror repository (implies bare)
    -l, --local           to clone from a local repository
    --no-hardlinks        don't use local hardlinks, always copy
    -s, --shared          setup as shared repository
    --recurse-submodules[=<pathspec>]
                          initialize submodules in the clone
    --recursive ...       alias of --recurse-submodules
    -j, --jobs <n>        number of submodules cloned in parallel
    --template <template-directory>
                          directory from which templates will be used
    --reference <repo>    reference repository
    --reference-if-able <repo>
                          reference repository
    --dissociate          use --reference only while cloning
    -o, --origin <name>   use <name> instead of 'origin' to track upstream
    -b, --branch <branch>
                          checkout <branch> instead of the remote's HEAD
    -u, --upload-pack <path>
                          path to git-upload-pack on the remote
    --depth <depth>       create a shallow clone of that depth
    --shallow-since <time>
                          create a shallow clone since a specific time
    --shallow-exclude <revision>
                          deepen history of shallow clone, excluding rev
    --single-branch       clone only one branch, HEAD or --branch
    --no-tags             don't clone any tags, and make later fetches not to follow them
    --shallow-submodules  any cloned submodules will be shallow
    --separate-git-dir <gitdir>
                          separate git dir from working tree
    -c, --config <key=value>
                          set config inside the new repository
    --server-option <server-specific>
                          option to transmit
    -4, --ipv4            use IPv4 addresses only
    -6, --ipv6            use IPv6 addresses only
    --filter <args>       object filtering
    --also-filter-submodules
                          apply partial clone filters to submodules
    --remote-submodules   any cloned submodules will use their remote-tracking branch
    --sparse              initialize sparse-checkout file to include only files at root

PS C:\project> git clone https://github.com/Rizwanahmad07/javapw.git
Cloning into 'javapw'...
remote: Enumerating objects: 18, done.
remote: Counting objects: 100% (18/18), done.
remote: Compressing objects: 100% (11/11), done.
remote: Total 18 (delta 0), reused 18 (delta 0), pack-reused 0
Receiving objects: 100% (18/18), done.